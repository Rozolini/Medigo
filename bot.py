import asyncio
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# üîÑ –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
order_messages = {}

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "8090513582:AAGlQgFCGTDScwwDaAQsLh9iUi0dWXH2zWE"

# üìå ID –≥—Ä—É–ø–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
GROUP_CHAT_ID = -4720936270

# üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# üìå FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
class OrderForm(StatesGroup):
    service = State()
    name = State()
    phone = State()
    address = State()
    district = State()

# üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
def is_valid_phone(phone):
    pattern = r"^\+?3?8?(0\d{9})$"
    return re.fullmatch(pattern, phone) is not None

# üìå –¶—ñ–Ω–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏
price_list = {
    "–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º'—è–∑–æ–≤–∏–π —É–∫–æ–ª": "100 –≥—Ä–Ω",
    "–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≤–µ–Ω–Ω–∏–π —É–∫–æ–ª": "150 –≥—Ä–Ω",
    "–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 30 —Ö–≤": "350 –≥—Ä–Ω",
    "–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 1 –≥–æ–¥": "600 –≥—Ä–Ω",
    "–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 2 –≥–æ–¥": "1200 –≥—Ä–Ω"
}

# üìå –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def send_main_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°—Ç–∞—Ä—Ç")]],
        resize_keyboard=True
    )
    text = """
–ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É Medigo ‚Äì —Å–µ—Ä–≤—ñ—Å—ñ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –º–µ–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –≤–¥–æ–º–∞! üòä

‚ú® <b>–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:</b>
üíâ –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º'—è–∑–æ–≤–∏–π —É–∫–æ–ª ‚Äì 100 –≥—Ä–Ω  
üíâ –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≤–µ–Ω–Ω–∏–π —É–∫–æ–ª ‚Äì 150 –≥—Ä–Ω  
üíß –ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 30 —Ö–≤ ‚Äì 350 –≥—Ä–Ω  
üíß –ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 1 –≥–æ–¥ ‚Äì 600 –≥—Ä–Ω  
üíß –ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 2 –≥–æ–¥ ‚Äì 1200 –≥—Ä–Ω  

‚ö†Ô∏è <b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É!</b>  
–ù–∞—à —Å–µ—Ä–≤—ñ—Å –Ω–µ –Ω–∞–¥–∞—î –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —Ç–æ–º—É –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º –º–µ–¥—Å–µ—Å—Ç—Ä–∏ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –ø—Ä–∏–¥–±–∞—Ç–∏ –≤—Å—ñ 
–Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ª—ñ–∫–∞—Ä—Å—å–∫—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ —Ç–∞ –≤–∏—Ä–æ–±–∏ –º–µ–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ü–æ—Å–ª—É–≥, –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –ª—ñ–∫–∞—Ä—è.

<b>–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏?</b>
üí≥ –û–ø–ª–∞—Ç–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –ø—ñ—Å–ª—è –ø—Ä–∏–±—É—Ç—Ç—è –º–µ–¥—Å–µ—Å—Ç—Ä–∏.

üè• –£—Å—ñ –Ω–∞—à—ñ –º–µ–¥—Å–µ—Å—Ç—Ä–∏ ‚Äì —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –∑ –º–µ–¥–∏—á–Ω–æ—é –æ—Å–≤—ñ—Ç–æ—é.

üìú –ù–∞—Ç–∏—Å–∫–∞—é—á–∏ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç", –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è –∑ <a href="https://docs.google.com/document/d/1HHiGjuGHyGgZiDyKsLbOeNvqcp58Uv7L/edit?usp=sharing">–£–º–æ–≤–∞–º–∏ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥</a> Medigo.

"""
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)

# üìå –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def welcome_message(message: types.Message):
    await send_main_menu(message)

# üìå –í–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏
@dp.message(F.text == "–°—Ç–∞—Ä—Ç")
async def choose_service(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º'—è–∑–æ–≤–∏–π —É–∫–æ–ª")],
            [KeyboardButton(text="–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≤–µ–Ω–Ω–∏–π —É–∫–æ–ª")],
            [KeyboardButton(text="–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=keyboard)

# üìå –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—ñ
@dp.message(F.text == "–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è")
async def choose_drip_type(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 30 —Ö–≤")],
            [KeyboardButton(text="–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 1 –≥–æ–¥")],
            [KeyboardButton(text="–ö—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—è –¥–æ 2 –≥–æ–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—Ä–∞–ø–µ–ª—å–Ω–∏—Ü—ñ:", reply_markup=keyboard)

# üìå –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
@dp.message(F.text.in_(price_list.keys()))
async def service_selected(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text, price=price_list[message.text])
    await state.set_state(OrderForm.name)
    await message.answer("üìå –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=types.ReplyKeyboardRemove())

# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(OrderForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderForm.phone)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)

# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message(OrderForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text.strip()
        if not is_valid_phone(phone_number):
            await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

    await state.update_data(phone=phone_number)
    await state.set_state(OrderForm.address)
    await message.answer("üè† –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=types.ReplyKeyboardRemove())
# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
@dp.message(OrderForm.address)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderForm.district)
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å —Ä–∞–π–æ–Ω –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞:")

# üìå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
@dp.message(OrderForm.district)
async def get_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    user_data = await state.get_data()

    text = f"""
‚úÖ –î—è–∫—É—î–º–æ, {user_data['name']}! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.

üè† –ê–¥—Ä–µ—Å–∞: {user_data['address']}
üìç –†–∞–π–æ–Ω: {user_data['district']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}

üí° –û–ø–ª–∞—Ç–∞ –ø—ñ—Å–ª—è –ø—Ä–∏–±—É—Ç—Ç—è –º–µ–¥—Å–µ—Å—Ç—Ä–∏.
üí∞ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {user_data['price']}

üè• –î—è–∫—É—î–º–æ, —â–æ –æ–±–∏—Ä–∞—î—Ç–µ Medigo!
"""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    await message.answer("üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏: UA433220010000026004330072431
    –£ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤–∫–∞–∂—ñ—Ç—å: –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –∑–∞–º–æ–≤–Ω–∏–∫–∞")

    # üìå –í–∏–ø—Ä–∞–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
    group_text = f"""
üìå <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>

üë§ <b>–Ü–º'—è:</b> {user_data['name']}
üè† <b>–ê–¥—Ä–µ—Å–∞:</b> {user_data['address']}
üìç <b>–†–∞–π–æ–Ω:</b> {user_data['district']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}
ü©∫ <b>–ü–æ—Å–ª—É–≥–∞:</b> {user_data['service']}
üí∞ <b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:</b> {user_data['price']}
"""

    await bot.send_message(GROUP_CHAT_ID, group_text, parse_mode="HTML")

    await state.clear()

# üìå –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
@dp.message(F.text == "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    await send_main_menu(message)

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
